// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#include "interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Axis::Axis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AxisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AxisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AxisDefaultTypeInternal() {}
  union {
    Axis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AxisDefaultTypeInternal _Axis_default_instance_;
PROTOBUF_CONSTEXPR UavInfo::UavInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.uav_id_)*/int64_t{0}
  , /*decltype(_impl_.capacity_)*/0
  , /*decltype(_impl_.max_energy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UavInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UavInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UavInfoDefaultTypeInternal() {}
  union {
    UavInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UavInfoDefaultTypeInternal _UavInfo_default_instance_;
PROTOBUF_CONSTEXPR TargetInfo::TargetInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.target_id_)*/int64_t{0}
  , /*decltype(_impl_.demand_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetInfoDefaultTypeInternal() {}
  union {
    TargetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetInfoDefaultTypeInternal _TargetInfo_default_instance_;
PROTOBUF_CONSTEXPR ObstacleInfo::ObstacleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObstacleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleInfoDefaultTypeInternal() {}
  union {
    ObstacleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleInfoDefaultTypeInternal _ObstacleInfo_default_instance_;
PROTOBUF_CONSTEXPR TaskPathPlanRequest::TaskPathPlanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uav_arr_)*/{}
  , /*decltype(_impl_.target_arr_)*/{}
  , /*decltype(_impl_.obs_arr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskPathPlanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskPathPlanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskPathPlanRequestDefaultTypeInternal() {}
  union {
    TaskPathPlanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskPathPlanRequestDefaultTypeInternal _TaskPathPlanRequest_default_instance_;
PROTOBUF_CONSTEXPR TargetIndex::TargetIndex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_id_)*/int64_t{0}
  , /*decltype(_impl_.index_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetIndexDefaultTypeInternal() {}
  union {
    TargetIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetIndexDefaultTypeInternal _TargetIndex_default_instance_;
PROTOBUF_CONSTEXPR PathPlanResult::PathPlanResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_arr_)*/{}
  , /*decltype(_impl_.path_arr_)*/{}
  , /*decltype(_impl_.uav_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathPlanResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathPlanResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathPlanResultDefaultTypeInternal() {}
  union {
    PathPlanResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathPlanResultDefaultTypeInternal _PathPlanResult_default_instance_;
PROTOBUF_CONSTEXPR TaskPathPlanReply::TaskPathPlanReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskPathPlanReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskPathPlanReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskPathPlanReplyDefaultTypeInternal() {}
  union {
    TaskPathPlanReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskPathPlanReplyDefaultTypeInternal _TaskPathPlanReply_default_instance_;
static ::_pb::Metadata file_level_metadata_interface_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_interface_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_interface_2eproto = nullptr;

const uint32_t TableStruct_interface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Axis, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Axis, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Axis, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UavInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UavInfo, _impl_.uav_id_),
  PROTOBUF_FIELD_OFFSET(::UavInfo, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::UavInfo, _impl_.max_energy_),
  PROTOBUF_FIELD_OFFSET(::UavInfo, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TargetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TargetInfo, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::TargetInfo, _impl_.demand_),
  PROTOBUF_FIELD_OFFSET(::TargetInfo, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObstacleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ObstacleInfo, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::ObstacleInfo, _impl_.radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TaskPathPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TaskPathPlanRequest, _impl_.uav_arr_),
  PROTOBUF_FIELD_OFFSET(::TaskPathPlanRequest, _impl_.target_arr_),
  PROTOBUF_FIELD_OFFSET(::TaskPathPlanRequest, _impl_.obs_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TargetIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TargetIndex, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::TargetIndex, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PathPlanResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PathPlanResult, _impl_.uav_id_),
  PROTOBUF_FIELD_OFFSET(::PathPlanResult, _impl_.target_arr_),
  PROTOBUF_FIELD_OFFSET(::PathPlanResult, _impl_.path_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TaskPathPlanReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TaskPathPlanReply, _impl_.arr_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Axis)},
  { 9, -1, -1, sizeof(::UavInfo)},
  { 19, -1, -1, sizeof(::TargetInfo)},
  { 28, -1, -1, sizeof(::ObstacleInfo)},
  { 36, -1, -1, sizeof(::TaskPathPlanRequest)},
  { 45, -1, -1, sizeof(::TargetIndex)},
  { 53, -1, -1, sizeof(::PathPlanResult)},
  { 62, -1, -1, sizeof(::TaskPathPlanReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Axis_default_instance_._instance,
  &::_UavInfo_default_instance_._instance,
  &::_TargetInfo_default_instance_._instance,
  &::_ObstacleInfo_default_instance_._instance,
  &::_TaskPathPlanRequest_default_instance_._instance,
  &::_TargetIndex_default_instance_._instance,
  &::_PathPlanResult_default_instance_._instance,
  &::_TaskPathPlanReply_default_instance_._instance,
};

const char descriptor_table_protodef_interface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017interface.proto\"\'\n\004Axis\022\t\n\001x\030\001 \001(\002\022\t\n\001"
  "y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"X\n\007UavInfo\022\016\n\006uav_id\030"
  "\001 \001(\003\022\020\n\010capacity\030\002 \001(\002\022\022\n\nmax_energy\030\003 "
  "\001(\002\022\027\n\010location\030\004 \001(\0132\005.Axis\"H\n\nTargetIn"
  "fo\022\021\n\ttarget_id\030\001 \001(\003\022\016\n\006demand\030\002 \001(\002\022\027\n"
  "\010location\030\003 \001(\0132\005.Axis\"7\n\014ObstacleInfo\022\027"
  "\n\010location\030\001 \001(\0132\005.Axis\022\016\n\006radius\030\002 \001(\002\""
  "q\n\023TaskPathPlanRequest\022\031\n\007uav_arr\030\001 \003(\0132"
  "\010.UavInfo\022\037\n\ntarget_arr\030\002 \003(\0132\013.TargetIn"
  "fo\022\036\n\007obs_arr\030\003 \003(\0132\r.ObstacleInfo\"/\n\013Ta"
  "rgetIndex\022\021\n\ttarget_id\030\001 \001(\003\022\r\n\005index\030\002 "
  "\001(\003\"[\n\016PathPlanResult\022\016\n\006uav_id\030\001 \001(\003\022 \n"
  "\ntarget_arr\030\002 \003(\0132\014.TargetIndex\022\027\n\010path_"
  "arr\030\003 \003(\0132\005.Axis\"1\n\021TaskPathPlanReply\022\034\n"
  "\003arr\030\001 \003(\0132\017.PathPlanResult2J\n\014TaskPathP"
  "lan\022:\n\014taskPathPlan\022\024.TaskPathPlanReques"
  "t\032\022.TaskPathPlanReply\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_interface_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_interface_2eproto = {
    false, false, 671, descriptor_table_protodef_interface_2eproto,
    "interface.proto",
    &descriptor_table_interface_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_interface_2eproto::offsets,
    file_level_metadata_interface_2eproto, file_level_enum_descriptors_interface_2eproto,
    file_level_service_descriptors_interface_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_interface_2eproto_getter() {
  return &descriptor_table_interface_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_interface_2eproto(&descriptor_table_interface_2eproto);

// ===================================================================

class Axis::_Internal {
 public:
};

Axis::Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Axis)
}
Axis::Axis(const Axis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Axis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Axis)
}

inline void Axis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Axis::~Axis() {
  // @@protoc_insertion_point(destructor:Axis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Axis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Axis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:Axis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Axis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Axis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Axis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Axis)
  return target;
}

size_t Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Axis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Axis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Axis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Axis::GetClassData() const { return &_class_data_; }


void Axis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Axis*>(&to_msg);
  auto& from = static_cast<const Axis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Axis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Axis::CopyFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axis::IsInitialized() const {
  return true;
}

void Axis::InternalSwap(Axis* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Axis, _impl_.z_)
      + sizeof(Axis::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Axis, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Axis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[0]);
}

// ===================================================================

class UavInfo::_Internal {
 public:
  static const ::Axis& location(const UavInfo* msg);
};

const ::Axis&
UavInfo::_Internal::location(const UavInfo* msg) {
  return *msg->_impl_.location_;
}
UavInfo::UavInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UavInfo)
}
UavInfo::UavInfo(const UavInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UavInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.uav_id_){}
    , decltype(_impl_.capacity_){}
    , decltype(_impl_.max_energy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Axis(*from._impl_.location_);
  }
  ::memcpy(&_impl_.uav_id_, &from._impl_.uav_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_energy_) -
    reinterpret_cast<char*>(&_impl_.uav_id_)) + sizeof(_impl_.max_energy_));
  // @@protoc_insertion_point(copy_constructor:UavInfo)
}

inline void UavInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.uav_id_){int64_t{0}}
    , decltype(_impl_.capacity_){0}
    , decltype(_impl_.max_energy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UavInfo::~UavInfo() {
  // @@protoc_insertion_point(destructor:UavInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UavInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void UavInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UavInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UavInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.uav_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_energy_) -
      reinterpret_cast<char*>(&_impl_.uav_id_)) + sizeof(_impl_.max_energy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UavInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uav_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uav_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.max_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Axis location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UavInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UavInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uav_id = 1;
  if (this->_internal_uav_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_uav_id(), target);
  }

  // float capacity = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_capacity = this->_internal_capacity();
  uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_capacity(), target);
  }

  // float max_energy = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_energy = this->_internal_max_energy();
  uint32_t raw_max_energy;
  memcpy(&raw_max_energy, &tmp_max_energy, sizeof(tmp_max_energy));
  if (raw_max_energy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_max_energy(), target);
  }

  // .Axis location = 4;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UavInfo)
  return target;
}

size_t UavInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UavInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Axis location = 4;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // int64 uav_id = 1;
  if (this->_internal_uav_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uav_id());
  }

  // float capacity = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_capacity = this->_internal_capacity();
  uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    total_size += 1 + 4;
  }

  // float max_energy = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_energy = this->_internal_max_energy();
  uint32_t raw_max_energy;
  memcpy(&raw_max_energy, &tmp_max_energy, sizeof(tmp_max_energy));
  if (raw_max_energy != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UavInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UavInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UavInfo::GetClassData() const { return &_class_data_; }


void UavInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UavInfo*>(&to_msg);
  auto& from = static_cast<const UavInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UavInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Axis::MergeFrom(
        from._internal_location());
  }
  if (from._internal_uav_id() != 0) {
    _this->_internal_set_uav_id(from._internal_uav_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_capacity = from._internal_capacity();
  uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_energy = from._internal_max_energy();
  uint32_t raw_max_energy;
  memcpy(&raw_max_energy, &tmp_max_energy, sizeof(tmp_max_energy));
  if (raw_max_energy != 0) {
    _this->_internal_set_max_energy(from._internal_max_energy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UavInfo::CopyFrom(const UavInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UavInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UavInfo::IsInitialized() const {
  return true;
}

void UavInfo::InternalSwap(UavInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UavInfo, _impl_.max_energy_)
      + sizeof(UavInfo::_impl_.max_energy_)
      - PROTOBUF_FIELD_OFFSET(UavInfo, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UavInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[1]);
}

// ===================================================================

class TargetInfo::_Internal {
 public:
  static const ::Axis& location(const TargetInfo* msg);
};

const ::Axis&
TargetInfo::_Internal::location(const TargetInfo* msg) {
  return *msg->_impl_.location_;
}
TargetInfo::TargetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TargetInfo)
}
TargetInfo::TargetInfo(const TargetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.demand_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Axis(*from._impl_.location_);
  }
  ::memcpy(&_impl_.target_id_, &from._impl_.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.demand_) -
    reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.demand_));
  // @@protoc_insertion_point(copy_constructor:TargetInfo)
}

inline void TargetInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.target_id_){int64_t{0}}
    , decltype(_impl_.demand_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TargetInfo::~TargetInfo() {
  // @@protoc_insertion_point(destructor:TargetInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void TargetInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.demand_) -
      reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.demand_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float demand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.demand_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Axis location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TargetInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_id(), target);
  }

  // float demand = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_demand = this->_internal_demand();
  uint32_t raw_demand;
  memcpy(&raw_demand, &tmp_demand, sizeof(tmp_demand));
  if (raw_demand != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_demand(), target);
  }

  // .Axis location = 3;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetInfo)
  return target;
}

size_t TargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Axis location = 3;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // int64 target_id = 1;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_target_id());
  }

  // float demand = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_demand = this->_internal_demand();
  uint32_t raw_demand;
  memcpy(&raw_demand, &tmp_demand, sizeof(tmp_demand));
  if (raw_demand != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetInfo::GetClassData() const { return &_class_data_; }


void TargetInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetInfo*>(&to_msg);
  auto& from = static_cast<const TargetInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TargetInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Axis::MergeFrom(
        from._internal_location());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_demand = from._internal_demand();
  uint32_t raw_demand;
  memcpy(&raw_demand, &tmp_demand, sizeof(tmp_demand));
  if (raw_demand != 0) {
    _this->_internal_set_demand(from._internal_demand());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetInfo::CopyFrom(const TargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo::IsInitialized() const {
  return true;
}

void TargetInfo::InternalSwap(TargetInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetInfo, _impl_.demand_)
      + sizeof(TargetInfo::_impl_.demand_)
      - PROTOBUF_FIELD_OFFSET(TargetInfo, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[2]);
}

// ===================================================================

class ObstacleInfo::_Internal {
 public:
  static const ::Axis& location(const ObstacleInfo* msg);
};

const ::Axis&
ObstacleInfo::_Internal::location(const ObstacleInfo* msg) {
  return *msg->_impl_.location_;
}
ObstacleInfo::ObstacleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ObstacleInfo)
}
ObstacleInfo::ObstacleInfo(const ObstacleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObstacleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.radius_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Axis(*from._impl_.location_);
  }
  _this->_impl_.radius_ = from._impl_.radius_;
  // @@protoc_insertion_point(copy_constructor:ObstacleInfo)
}

inline void ObstacleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.radius_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObstacleInfo::~ObstacleInfo() {
  // @@protoc_insertion_point(destructor:ObstacleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void ObstacleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ObstacleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _impl_.radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Axis location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObstacleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Axis location = 1;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // float radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObstacleInfo)
  return target;
}

size_t ObstacleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObstacleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Axis location = 1;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // float radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObstacleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleInfo::GetClassData() const { return &_class_data_; }


void ObstacleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObstacleInfo*>(&to_msg);
  auto& from = static_cast<const ObstacleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ObstacleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Axis::MergeFrom(
        from._internal_location());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleInfo::CopyFrom(const ObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInfo::IsInitialized() const {
  return true;
}

void ObstacleInfo::InternalSwap(ObstacleInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleInfo, _impl_.radius_)
      + sizeof(ObstacleInfo::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(ObstacleInfo, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[3]);
}

// ===================================================================

class TaskPathPlanRequest::_Internal {
 public:
};

TaskPathPlanRequest::TaskPathPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TaskPathPlanRequest)
}
TaskPathPlanRequest::TaskPathPlanRequest(const TaskPathPlanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskPathPlanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uav_arr_){from._impl_.uav_arr_}
    , decltype(_impl_.target_arr_){from._impl_.target_arr_}
    , decltype(_impl_.obs_arr_){from._impl_.obs_arr_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TaskPathPlanRequest)
}

inline void TaskPathPlanRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uav_arr_){arena}
    , decltype(_impl_.target_arr_){arena}
    , decltype(_impl_.obs_arr_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskPathPlanRequest::~TaskPathPlanRequest() {
  // @@protoc_insertion_point(destructor:TaskPathPlanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskPathPlanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uav_arr_.~RepeatedPtrField();
  _impl_.target_arr_.~RepeatedPtrField();
  _impl_.obs_arr_.~RepeatedPtrField();
}

void TaskPathPlanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskPathPlanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskPathPlanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uav_arr_.Clear();
  _impl_.target_arr_.Clear();
  _impl_.obs_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskPathPlanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UavInfo uav_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uav_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TargetInfo target_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ObstacleInfo obs_arr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obs_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskPathPlanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskPathPlanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UavInfo uav_arr = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uav_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_uav_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TargetInfo target_arr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_target_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_target_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ObstacleInfo obs_arr = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obs_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_obs_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskPathPlanRequest)
  return target;
}

size_t TaskPathPlanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskPathPlanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UavInfo uav_arr = 1;
  total_size += 1UL * this->_internal_uav_arr_size();
  for (const auto& msg : this->_impl_.uav_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TargetInfo target_arr = 2;
  total_size += 1UL * this->_internal_target_arr_size();
  for (const auto& msg : this->_impl_.target_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ObstacleInfo obs_arr = 3;
  total_size += 1UL * this->_internal_obs_arr_size();
  for (const auto& msg : this->_impl_.obs_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskPathPlanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskPathPlanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskPathPlanRequest::GetClassData() const { return &_class_data_; }


void TaskPathPlanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskPathPlanRequest*>(&to_msg);
  auto& from = static_cast<const TaskPathPlanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TaskPathPlanRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uav_arr_.MergeFrom(from._impl_.uav_arr_);
  _this->_impl_.target_arr_.MergeFrom(from._impl_.target_arr_);
  _this->_impl_.obs_arr_.MergeFrom(from._impl_.obs_arr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskPathPlanRequest::CopyFrom(const TaskPathPlanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskPathPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPathPlanRequest::IsInitialized() const {
  return true;
}

void TaskPathPlanRequest::InternalSwap(TaskPathPlanRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uav_arr_.InternalSwap(&other->_impl_.uav_arr_);
  _impl_.target_arr_.InternalSwap(&other->_impl_.target_arr_);
  _impl_.obs_arr_.InternalSwap(&other->_impl_.obs_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskPathPlanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[4]);
}

// ===================================================================

class TargetIndex::_Internal {
 public:
};

TargetIndex::TargetIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TargetIndex)
}
TargetIndex::TargetIndex(const TargetIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetIndex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_id_, &from._impl_.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:TargetIndex)
}

inline void TargetIndex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_){int64_t{0}}
    , decltype(_impl_.index_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TargetIndex::~TargetIndex() {
  // @@protoc_insertion_point(destructor:TargetIndex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TargetIndex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetIndex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetIndex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetIndex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TargetIndex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_id(), target);
  }

  // int64 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetIndex)
  return target;
}

size_t TargetIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetIndex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_target_id());
  }

  // int64 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetIndex::GetClassData() const { return &_class_data_; }


void TargetIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetIndex*>(&to_msg);
  auto& from = static_cast<const TargetIndex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TargetIndex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetIndex::CopyFrom(const TargetIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetIndex::IsInitialized() const {
  return true;
}

void TargetIndex::InternalSwap(TargetIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetIndex, _impl_.index_)
      + sizeof(TargetIndex::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(TargetIndex, _impl_.target_id_)>(
          reinterpret_cast<char*>(&_impl_.target_id_),
          reinterpret_cast<char*>(&other->_impl_.target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[5]);
}

// ===================================================================

class PathPlanResult::_Internal {
 public:
};

PathPlanResult::PathPlanResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PathPlanResult)
}
PathPlanResult::PathPlanResult(const PathPlanResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PathPlanResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_arr_){from._impl_.target_arr_}
    , decltype(_impl_.path_arr_){from._impl_.path_arr_}
    , decltype(_impl_.uav_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.uav_id_ = from._impl_.uav_id_;
  // @@protoc_insertion_point(copy_constructor:PathPlanResult)
}

inline void PathPlanResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_arr_){arena}
    , decltype(_impl_.path_arr_){arena}
    , decltype(_impl_.uav_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PathPlanResult::~PathPlanResult() {
  // @@protoc_insertion_point(destructor:PathPlanResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathPlanResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_arr_.~RepeatedPtrField();
  _impl_.path_arr_.~RepeatedPtrField();
}

void PathPlanResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathPlanResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PathPlanResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_arr_.Clear();
  _impl_.path_arr_.Clear();
  _impl_.uav_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPlanResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uav_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uav_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TargetIndex target_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Axis path_arr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathPlanResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathPlanResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uav_id = 1;
  if (this->_internal_uav_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_uav_id(), target);
  }

  // repeated .TargetIndex target_arr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_target_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_target_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Axis path_arr = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_path_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_path_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathPlanResult)
  return target;
}

size_t PathPlanResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathPlanResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TargetIndex target_arr = 2;
  total_size += 1UL * this->_internal_target_arr_size();
  for (const auto& msg : this->_impl_.target_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Axis path_arr = 3;
  total_size += 1UL * this->_internal_path_arr_size();
  for (const auto& msg : this->_impl_.path_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 uav_id = 1;
  if (this->_internal_uav_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uav_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathPlanResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PathPlanResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathPlanResult::GetClassData() const { return &_class_data_; }


void PathPlanResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PathPlanResult*>(&to_msg);
  auto& from = static_cast<const PathPlanResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PathPlanResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_arr_.MergeFrom(from._impl_.target_arr_);
  _this->_impl_.path_arr_.MergeFrom(from._impl_.path_arr_);
  if (from._internal_uav_id() != 0) {
    _this->_internal_set_uav_id(from._internal_uav_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathPlanResult::CopyFrom(const PathPlanResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathPlanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanResult::IsInitialized() const {
  return true;
}

void PathPlanResult::InternalSwap(PathPlanResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_arr_.InternalSwap(&other->_impl_.target_arr_);
  _impl_.path_arr_.InternalSwap(&other->_impl_.path_arr_);
  swap(_impl_.uav_id_, other->_impl_.uav_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPlanResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[6]);
}

// ===================================================================

class TaskPathPlanReply::_Internal {
 public:
};

TaskPathPlanReply::TaskPathPlanReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TaskPathPlanReply)
}
TaskPathPlanReply::TaskPathPlanReply(const TaskPathPlanReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskPathPlanReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arr_){from._impl_.arr_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TaskPathPlanReply)
}

inline void TaskPathPlanReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arr_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskPathPlanReply::~TaskPathPlanReply() {
  // @@protoc_insertion_point(destructor:TaskPathPlanReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskPathPlanReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arr_.~RepeatedPtrField();
}

void TaskPathPlanReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskPathPlanReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskPathPlanReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskPathPlanReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PathPlanResult arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskPathPlanReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskPathPlanReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PathPlanResult arr = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskPathPlanReply)
  return target;
}

size_t TaskPathPlanReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskPathPlanReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PathPlanResult arr = 1;
  total_size += 1UL * this->_internal_arr_size();
  for (const auto& msg : this->_impl_.arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskPathPlanReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskPathPlanReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskPathPlanReply::GetClassData() const { return &_class_data_; }


void TaskPathPlanReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskPathPlanReply*>(&to_msg);
  auto& from = static_cast<const TaskPathPlanReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TaskPathPlanReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arr_.MergeFrom(from._impl_.arr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskPathPlanReply::CopyFrom(const TaskPathPlanReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskPathPlanReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPathPlanReply::IsInitialized() const {
  return true;
}

void TaskPathPlanReply::InternalSwap(TaskPathPlanReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arr_.InternalSwap(&other->_impl_.arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskPathPlanReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Axis*
Arena::CreateMaybeMessage< ::Axis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Axis >(arena);
}
template<> PROTOBUF_NOINLINE ::UavInfo*
Arena::CreateMaybeMessage< ::UavInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UavInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TargetInfo*
Arena::CreateMaybeMessage< ::TargetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TargetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ObstacleInfo*
Arena::CreateMaybeMessage< ::ObstacleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ObstacleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskPathPlanRequest*
Arena::CreateMaybeMessage< ::TaskPathPlanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TaskPathPlanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TargetIndex*
Arena::CreateMaybeMessage< ::TargetIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TargetIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::PathPlanResult*
Arena::CreateMaybeMessage< ::PathPlanResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PathPlanResult >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskPathPlanReply*
Arena::CreateMaybeMessage< ::TaskPathPlanReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TaskPathPlanReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
